name: Deploy to AWS

on:
  workflow_run:
    workflows: ["Lint", "Static Code Scan", "Build", "E2E Tests"]
    types: [completed]
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Wait for all required workflows
        uses: actions/github-script@v7
        with:
          script: |
            const requiredWorkflows = ['Lint', 'Static Code Scan', 'Build', 'E2E Tests'];
            const sha = context.payload.workflow_run.head_sha;
            
            console.log(`üîç Checking all workflows for commit: ${sha}`);
            
            // Check each required workflow
            for (const workflowName of requiredWorkflows) {
              const workflowFileName = workflowName.toLowerCase().replace(/\s+/g, '-') + '.yml';
              
              try {
                const runs = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowFileName,
                  head_sha: sha,
                });
                
                const completedRun = runs.data.workflow_runs.find(run => 
                  run.head_sha === sha && run.status === 'completed'
                );
                
                if (!completedRun) {
                  console.log(`‚ùå ${workflowName} not yet completed for commit ${sha}`);
                  console.log('üõë Skipping deployment - not all workflows complete');
                  process.exit(0); // Exit gracefully, don't fail the workflow
                }
                
                if (completedRun.conclusion !== 'success') {
                  console.log(`‚ùå ${workflowName} failed for commit ${sha}`);
                  core.setFailed(`Required workflow ${workflowName} failed`);
                  return;
                }
                
                console.log(`‚úÖ ${workflowName}: ${completedRun.conclusion}`);
              } catch (error) {
                console.log(`‚ö†Ô∏è Could not check ${workflowName}: ${error.message}`);
              }
            }
            
            console.log('üéâ All required workflows completed successfully!');
            console.log('üöÄ Proceeding with deployment...');
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
        
      - name: Create deployment package
        working-directory: ./app
        run: |
          zip -r ../deployment-${{ github.sha }}.zip . \
            -x "node_modules/*" \
            -x "uploads/*" \
            -x "*.log" \
            -x "check-node22.js" \
            -x "app-deployment.zip"
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Upload to S3
        run: |
          aws s3 cp deployment-${{ github.sha }}.zip \
            s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/deployment-${{ github.sha }}.zip
            
      - name: Create Elastic Beanstalk application version
        run: |
          VERSION_LABEL="github-${{ github.sha }}"
          
          # Try to create application version, ignore error if it already exists
          echo "üì¶ Creating application version: $VERSION_LABEL"
          
          if aws elasticbeanstalk create-application-version \
            --application-name "${{ secrets.EB_APPLICATION_NAME }}" \
            --version-label "$VERSION_LABEL" \
            --description "Deployed from GitHub Actions - ${{ github.event.workflow_run.head_commit.message || 'CI/CD Pipeline' }}" \
            --source-bundle S3Bucket="${{ secrets.S3_DEPLOYMENT_BUCKET }}",S3Key="deployment-${{ github.sha }}.zip" 2>/dev/null; then
            echo "‚úÖ Application version created successfully"
          else
            echo "üì¶ Application version $VERSION_LABEL may already exist, proceeding with deployment"
          fi
            
      - name: Check environment status before deployment
        run: |
          echo "üîç Checking environment status before deployment..."
          VERSION_LABEL="github-${{ github.sha }}"
          
          # Wait for environment to be ready if it's currently updating
          timeout=300  # 5 minutes timeout for initial check
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            status=$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ secrets.EB_ENVIRONMENT_NAME }}" \
              --query 'Environments[0].Status' \
              --output text)
            
            if [ "$status" = "Ready" ]; then
              echo "‚úÖ Environment is ready for deployment"
              break
            elif [ "$status" = "Updating" ]; then
              echo "‚è≥ Environment is currently updating (${elapsed}s elapsed)..."
              sleep 30
              elapsed=$((elapsed + 30))
            else
              echo "‚ùå Environment is in unexpected status: $status"
              exit 1
            fi
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Timeout waiting for environment to be ready"
            exit 1
          fi
            
      - name: Deploy to Elastic Beanstalk
        run: |
          VERSION_LABEL="github-${{ github.sha }}"
          echo "üöÄ Deploying version $VERSION_LABEL to environment ${{ secrets.EB_ENVIRONMENT_NAME }}"
          
          aws elasticbeanstalk update-environment \
            --environment-name "${{ secrets.EB_ENVIRONMENT_NAME }}" \
            --version-label "$VERSION_LABEL"
            
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          timeout=600  # 10 minutes timeout
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            status=$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ secrets.EB_ENVIRONMENT_NAME }}" \
              --query 'Environments[0].Status' \
              --output text)
              
            health=$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ secrets.EB_ENVIRONMENT_NAME }}" \
              --query 'Environments[0].Health' \
              --output text)
              
            echo "Status: $status, Health: $health"
            
            if [ "$status" = "Ready" ]; then
              echo "‚úÖ Deployment completed successfully!"
              break
            elif [ "$status" = "Severe" ] || [ "$status" = "Terminated" ]; then
              echo "‚ùå Deployment failed!"
              exit 1
            fi
            
            sleep 30
            elapsed=$((elapsed + 30))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Deployment timed out!"
            exit 1
          fi
          
      - name: Verify deployment
        run: |
          endpoint_url=$(aws elasticbeanstalk describe-environments \
            --environment-names "${{ secrets.EB_ENVIRONMENT_NAME }}" \
            --query 'Environments[0].CNAME' \
            --output text)
            
          echo "üîó Application URL: http://$endpoint_url"
          echo "üß™ Testing health endpoint..."
          
          curl -f "http://$endpoint_url/health" || {
            echo "‚ùå Health check failed!"
            exit 1
          }
          
          echo "‚úÖ Deployment verification successful!"
